import React, { createContext, useReducer, useContext, useEffect, useState } from 'react';
import { createGlobalStyle } from 'styled-components';
import PropTypes from 'prop-types';
import TagsInput from 'react-tagsinput';
import Markdown from 'markdown-to-jsx';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

var FormContext =
/*#__PURE__*/
createContext(null);

function reducer(state, action) {
  switch (action.type) {
    case 'update':
      var data = {};
      data[action.id] = action.value;
      return _extends({}, state, {}, data);

    case 'registerField':
      var temp = _extends({}, state); // Adds blank value if default doesn't exist


      if (!temp[action.id]) {
        temp[action.id] = action.value;
      } // Add field based default values if one doesn't exist


      if (!temp.defaultValues[action.id]) {
        temp.defaultValues[action.id] = action.value || '';
      }

      return temp;

    case 'resetForm':
      var defaultValues = state.defaultValues;
      return _extends({
        defaultValues: defaultValues
      }, state.defaultValues);

    default:
      throw new Error();
  }
}

function FormProvider(_ref) {
  var children = _ref.children,
      defaultValues = _ref.defaultValues;

  var _useReducer = useReducer(reducer, _extends({
    defaultValues: defaultValues
  }, defaultValues)),
      formState = _useReducer[0],
      dispatch = _useReducer[1];

  var ContextProvider = {
    formState: formState,
    update: function update(_ref2) {
      var id = _ref2.id,
          value = _ref2.value;
      return dispatch({
        type: 'update',
        id: id,
        value: value
      });
    },
    registerField: function registerField(_ref3) {
      var id = _ref3.id,
          value = _ref3.value;
      return dispatch({
        type: 'registerField',
        id: id,
        value: value
      });
    },
    resetForm: function resetForm() {
      return dispatch({
        type: 'resetForm'
      });
    }
  };
  return React.createElement(FormContext.Provider, {
    value: ContextProvider
  }, children);
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  :root {\n    --fresh-tooltip-color: #000;\n    --fresh-tooltip-background: #eee;\n  }\n\n  .fresh-switch {\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 34px;\n    margin: 0.5em 0px;\n  }\n\n  .fresh-switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n\n  .fresh-slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: #ccc;\n    transition: 0.4s;\n    border-radius: 34px;\n  }\n\n  .fresh-slider:before {\n    position: absolute;\n    content: '';\n    height: 26px;\n    width: 26px;\n    left: 4px;\n    bottom: 4px;\n    background-color: white;\n    transition: 0.4s;\n    border-radius: 50%;\n  }\n\n  input:checked + .fresh-slider {\n    background-color: #2196f3;\n  }\n\n  input:focus + .fresh-slider {\n    box-shadow: 0 0 1px #2196f3;\n  }\n\n  input:checked + .fresh-slider:before {\n    transform: translateX(26px);\n  }\n\n  input,\n  select,\n  textarea,\n  .fresh-input {\n    background-color: transparent;\n    box-sizing: border-box;\n    box-shadow: none;\n    max-width: 100%;\n    border-width: 1px;\n    border-style: solid;\n    border-image: initial;\n    border-color: inherit;\n    border-radius: 3px;\n    font: inherit;\n    margin: 0.5em 0px;\n    padding: 0.75em;\n    transition: border-color 0.2s ease 0s;\n  }\n\n  textarea,\n  .fresh-input-textarea,\n  .fresh-input-markdown {\n    min-height: 6rem;\n  }\n\n  .fresh-markdown-wrapper {\n    .fresh-input-markdown {\n      border-color: #eee; \n    }\n    .fresh-input-textarea,\n    .fresh-input-markdown {\n      width: 100%;\n    }\n    @media (min-width: 800px) {\n      display: flex;\n      .fresh-input-textarea {\n        width: 50%;  \n      }\n      \n      .fresh-input-markdown {\n        width: calc(50% - 0.5em);  \n        margin-left: 0.5em;\n      }\n    }\n  }\n  \n  /* Label and Tooltip */\n  .fresh-focused {\n    border: 1px solid #eee;\n    max-height: 200px;\n    overflow-y: scroll;\n    position: absolute;\n    background: white;\n    width: 100%;\n    margin-top: -0.5em;\n    border-top: 0;\n  }\n\n  .fresh-label {\n    position: relative;\n  }\n\n  .fresh-title {\n    display: flex; \n    align-items: center;\n    .fresh-tooltip {\n      position: relative;\n      color: var(--fresh-tooltip-color);\n      &:after {\n        position: absolute;\n        left: 150%;\n        min-width: 100px;\n        content: attr(data-tooltip);\n        opacity: 0;\n        transition: all .3s ease-in-out .35s;\n        visibility: hidden;\n        z-index: 2;\n        position: absolute;\n        background-color: var(--fresh-tooltip-background);\n        padding: 0.75em;\n        border-radius: 3px;\n        font-size: 0.8em;\n      }\n      &:hover:after {\n        opacity: 1;\n        left: 130%;\n        visibility: visible;\n      }\n      .fresh-tooltip-icon {\n        position: relative;\n        height: 0.8em;\n        width: 0.8em;\n        min-height: 0.8em;\n        min-width: 0.8em;\n      }\n    }\n  }\n\n  /* Reference Field */\n  .fresh-focused {\n    border: 1px solid #eee;\n    max-height: 200px;\n    overflow-y: scroll;\n    position: absolute;\n    background: white;\n    width: 100%;\n    margin-top: -0.5em;\n    border-top: 0;\n  }\n\n  /* Tag Field */\n  .fresh-input-tags {\n    margin-top: 1rem;\n  }\n\n  .react-tagsinput-tag {\n    background: #eee;\n    padding: 6px 10px;\n    margin: 0 6px 0 0;\n  }\n\n  .react-tagsinput-input {\n    margin-top: 1rem;\n    display: block;\n  }\n\n  /* Toggle Field */\n  .fresh-switch {\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 34px;\n    margin: 0.5em 0px;\n    .fresh-input-toggle {\n      opacity: 0;\n      width: 0;\n      height: 0;\n    }\n    .fresh-slider {\n      position: absolute;\n      cursor: pointer;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: var(--fresh-toggle-color);\n      transition: 0.4s;\n      border-width: 1px;\n      border-style: solid;\n      border-image: initial;\n      border-color: inherit;\n      border-radius: 34px;\n      &.on {\n        background-color: var(--fresh-toggle-on-color);\n        &:focus {\n          box-shadow: 0 0 1px var(--fresh-toggle-on-color);\n        }\n        &:before {\n          transform: translateX(26px);\n        }\n      }\n      &:before {\n        position: absolute;\n        content: '';\n        height: 26px;\n        width: 26px;\n        left: 2px;\n        bottom: 2px;\n        background-color: white;\n        transition: 0.4s;\n        border-width: 1px;\n        border-style: solid;\n        border-image: initial;\n        border-color: inherit;\n        border-radius: 50%;\n      }\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var Global =
/*#__PURE__*/
createGlobalStyle(
/*#__PURE__*/
_templateObject());

var CancelButton = function CancelButton(_ref) {
  var cancelAction = _ref.cancelAction,
      cancelText = _ref.cancelText;

  var _useContext = useContext(FormContext),
      resetForm = _useContext.resetForm;

  return React.createElement("button", {
    id: "fresh-cancel",
    className: "fresh-button fresh-cancel",
    onClick: function onClick() {
      cancelAction();
      resetForm();
    },
    type: "reset"
  }, cancelText);
};

CancelButton.propTypes = {
  cancelAction: PropTypes.func.isRequired,
  cancelText: PropTypes.string
};
CancelButton.defaultProps = {
  cancelText: 'Cancel'
};

var Tooltip = function Tooltip(_ref) {
  var tooltip = _ref.tooltip,
      tooltipBackground = _ref.tooltipBackground,
      tooltipColor = _ref.tooltipColor,
      tooltipIconColor = _ref.tooltipIconColor;
  var tooltipStyle = {
    '--fresh-tooltip-background': tooltipBackground,
    '--fresh-tooltip-color': tooltipColor,
    '--fresh-tooltip-icon-color': tooltipIconColor
  };
  return React.createElement("span", {
    className: "fresh-tooltip",
    "data-tooltip": tooltip,
    style: tooltipStyle
  }, React.createElement("svg", {
    className: "fresh-tooltip-icon",
    width: "16",
    height: "16",
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16ZM9.02539 5.91797H5.84668V7.79102H6.91309V11.127H5.84668V13H10.0098V11.127H9.02539V5.91797ZM6.89258 3.16309C6.83333 3.30892 6.80371 3.46615 6.80371 3.63477C6.80371 3.80339 6.83333 3.96289 6.89258 4.11328C6.95638 4.25911 7.04297 4.38672 7.15234 4.49609C7.26172 4.60547 7.38932 4.69206 7.53516 4.75586C7.68555 4.81966 7.84733 4.85156 8.02051 4.85156C8.18457 4.85156 8.33952 4.81966 8.48535 4.75586C8.63118 4.69206 8.75879 4.60547 8.86816 4.49609C8.97754 4.38672 9.06413 4.25911 9.12793 4.11328C9.19173 3.96289 9.22363 3.80339 9.22363 3.63477C9.22363 3.46615 9.19173 3.30892 9.12793 3.16309C9.06413 3.0127 8.97754 2.88281 8.86816 2.77344C8.75879 2.66406 8.63118 2.57747 8.48535 2.51367C8.33952 2.44987 8.18457 2.41797 8.02051 2.41797C7.84733 2.41797 7.68555 2.44987 7.53516 2.51367C7.38932 2.57747 7.26172 2.66406 7.15234 2.77344C7.04297 2.88281 6.95638 3.0127 6.89258 3.16309Z",
    fill: tooltipIconColor
  })));
};

Tooltip.propTypes = {
  tooltip: PropTypes.string,
  tooltipBackground: PropTypes.string,
  tooltipColor: PropTypes.string,
  tooltipIconColor: PropTypes.string
};
Tooltip.defaultProps = {
  tooltip: '',
  tooltipBackground: '#eee',
  tooltipColor: '#000',
  tooltipIconColor: '#000'
};

function useSpecialField(_ref) {
  var fieldId = _ref.fieldId,
      defaultValue = _ref.defaultValue;

  var _useContext = useContext(FormContext),
      registerField = _useContext.registerField,
      formState = _useContext.formState,
      update = _useContext.update;

  useEffect(function () {
    registerField({
      id: fieldId,
      value: defaultValue
    });
  }, []);
  return {
    formState: formState,
    update: update,
    fieldState: formState[fieldId]
  };
}

var Select = function Select(_ref) {
  var options = _ref.options,
      fieldId = _ref.fieldId,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? 0 : _ref$defaultValue;

  var _useSpecialField = useSpecialField({
    fieldId: fieldId,
    defaultValue: defaultValue
  }),
      fieldState = _useSpecialField.fieldState,
      update = _useSpecialField.update;

  return React.createElement("select", {
    id: "fresh-" + fieldId,
    className: "fresh-input fresh-input-select",
    onChange: function onChange(e) {
      return update({
        id: fieldId,
        value: e.target.value
      });
    },
    value: fieldState
  }, options.map(function (option) {
    return React.createElement("option", {
      value: option,
      key: option,
      className: "fresh-option"
    }, option);
  }));
};

var Reference = function Reference(_ref) {
  var options = _ref.options,
      fieldId = _ref.fieldId,
      displayProperty = _ref.displayProperty,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? {} : _ref$defaultValue,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? '' : _ref$placeholder;

  var _useSpecialField = useSpecialField({
    fieldId: fieldId,
    defaultValue: defaultValue
  }),
      update = _useSpecialField.update;

  var _useState = useState(''),
      inputValue = _useState[0],
      setInputValue = _useState[1];

  var _useState2 = useState(false),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];

  return React.createElement(React.Fragment, null, React.createElement("input", {
    id: "fresh-" + fieldId,
    onChange: function onChange(e) {
      return setInputValue(e.target.value);
    },
    value: inputValue,
    onFocus: function onFocus() {
      return setIsFocused(true);
    },
    onBlur: function onBlur() {
      return setIsFocused(false);
    },
    placeholder: placeholder,
    type: "text",
    className: "fresh-input fresh-input-reference"
  }), isFocused && React.createElement("div", {
    className: "fresh-focused"
  }, options.filter(function (option) {
    return option[displayProperty].toLowerCase().includes(inputValue.toLowerCase());
  }).map(function (option) {
    return React.createElement("div", {
      key: option.id,
      style: {
        padding: '0.75em'
      },
      onMouseDown: function onMouseDown() {
        update({
          id: fieldId,
          value: option
        });
        setInputValue(option[displayProperty]);
      }
    }, option[displayProperty]);
  })));
};

var Password = function Password(_ref) {
  var className = _ref.className,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? '' : _ref$defaultValue,
      fieldId = _ref.fieldId,
      placeholder = _ref.placeholder,
      required = _ref.required,
      _ref$strength = _ref.strength,
      strength = _ref$strength === void 0 ? true : _ref$strength,
      type = _ref.type;

  var _useSpecialField = useSpecialField({
    fieldId: fieldId,
    defaultValue: defaultValue
  }),
      fieldState = _useSpecialField.fieldState,
      update = _useSpecialField.update;

  var strengthValue = calculateScore(fieldState || '');
  var strengthMeter = {
    background: '#ccc',
    width: 'calc(193px * 0.25)'
  };

  if (strengthValue === 2) {
    strengthMeter = {
      width: 'calc(193px * 0.5)',
      background: 'red'
    };
  } else if (strengthValue === 3) {
    strengthMeter = {
      width: 'calc(193px * 0.75)',
      background: 'red'
    };
  } else if (strengthValue === 4) {
    strengthMeter = {
      width: 'calc(193px * 1)',
      background: 'green'
    };
  }

  return React.createElement(React.Fragment, null, React.createElement("input", {
    className: "fresh-input fresh-input-password " + className,
    placeholder: placeholder,
    type: type,
    required: required,
    value: fieldState || '',
    id: "fresh-" + fieldId,
    onChange: function onChange(e) {
      return update({
        value: e.target.value,
        id: fieldId
      });
    }
  }), strength && React.createElement("div", {
    style: _extends({
      height: '4px',
      marginBottom: '1rem',
      transition: '0.3s ease all'
    }, strengthMeter)
  }));
};

Password.propTypes = {
  strength: PropTypes.bool,
  placeholder: PropTypes.string
};
Password.defaultProps = {
  placeholder: ''
};
var options = {
  showText: true,
  fieldPartialMatch: true,
  minimumLength: 4
};

function calculateScore(password) {
  var score = 0; // password < options.minimumLength

  if (password.length < options.minimumLength) {
    return -1;
  } // password length


  score += password.length * 4; // password has 3 numbers

  if (password.match(/(.*[0-9].*[0-9].*[0-9])/)) {
    score += 5;
  } // password has at least 2 sybols


  var symbols = '.*[!,@,#,$,%,^,&,*,?,_,~]';
  symbols = new RegExp('(' + symbols + symbols + ')');

  if (password.match(symbols)) {
    score += 5;
  } // password has Upper and Lower chars


  if (password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)) {
    score += 10;
  } // password has number and chars


  if (password.match(/([a-zA-Z])/) && password.match(/([0-9])/)) {
    score += 15;
  } // password has number and symbol


  if (password.match(/([!,@,#,$,%,^,&,*,?,_,~])/) && password.match(/([0-9])/)) {
    score += 15;
  } // password has char and symbol


  if (password.match(/([!,@,#,$,%,^,&,*,?,_,~])/) && password.match(/([a-zA-Z])/)) {
    score += 15;
  } // password is just numbers or chars


  if (password.match(/^\w+$/) || password.match(/^\d+$/)) {
    score -= 10;
  }

  if (score > 100) {
    score = 100;
  }

  if (score < 0) {
    score = 0;
  }

  return score * 0.04;
}

var Tags = function Tags(_ref) {
  var _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? [] : _ref$defaultValue,
      fieldId = _ref.fieldId;

  var _useSpecialField = useSpecialField({
    fieldId: fieldId,
    defaultValue: defaultValue
  }),
      update = _useSpecialField.update,
      fieldState = _useSpecialField.fieldState;

  return React.createElement(TagsInput, {
    value: fieldState || [],
    onChange: function onChange(value) {
      return update({
        id: fieldId,
        value: value
      });
    },
    className: "fresh-input-tags",
    id: "fresh-" + fieldId,
    style: {
      marginTop: '1rem'
    }
  });
};

var TextArea = function TextArea(_ref) {
  var _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? '' : _ref$defaultValue,
      fieldId = _ref.fieldId,
      placeholder = _ref.placeholder;

  var _useSpecialField = useSpecialField({
    fieldId: fieldId,
    defaultValue: defaultValue
  }),
      fieldState = _useSpecialField.fieldState,
      update = _useSpecialField.update;

  return React.createElement("textarea", {
    id: "fresh-" + fieldId,
    placeholder: placeholder,
    value: fieldState || '',
    className: "fresh-input fresh-input-textarea",
    onChange: function onChange(e) {
      return update({
        id: fieldId,
        value: e.target.value
      });
    }
  });
};

var NumberField = function NumberField(_ref) {
  var fieldId = _ref.fieldId,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue,
      placeholder = _ref.placeholder,
      required = _ref.required,
      className = _ref.className;

  var _useSpecialField = useSpecialField({
    fieldId: fieldId,
    defaultValue: defaultValue
  }),
      fieldState = _useSpecialField.fieldState,
      update = _useSpecialField.update;

  return React.createElement(React.Fragment, null, React.createElement("input", {
    required: required,
    className: "fresh-input fresh-input-number " + className,
    placeholder: placeholder,
    id: "fresh-" + fieldId,
    type: "number",
    value: fieldState || '',
    onChange: function onChange(e) {
      var value = e.target.value ? parseInt(e.target.value) : null;
      update({
        id: fieldId,
        value: value
      });
    }
  }));
};

var TextArea$1 = function TextArea(_ref) {
  var _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? '' : _ref$defaultValue,
      fieldId = _ref.fieldId,
      placeholder = _ref.placeholder;

  var _useSpecialField = useSpecialField({
    fieldId: fieldId,
    defaultValue: defaultValue
  }),
      fieldState = _useSpecialField.fieldState,
      update = _useSpecialField.update;

  return React.createElement("div", {
    className: "fresh-markdown-wrapper"
  }, React.createElement("textarea", {
    id: "fresh-" + fieldId,
    placeholder: placeholder,
    value: fieldState || '',
    className: "fresh-input fresh-input-textarea",
    onChange: function onChange(e) {
      return update({
        id: fieldId,
        value: e.target.value
      });
    }
  }), React.createElement("div", {
    className: "fresh-input fresh-input-markdown"
  }, React.createElement(Markdown, {
    children: fieldState || ''
  })));
};

var Text = function Text(_ref) {
  var className = _ref.className,
      defaultValue = _ref.defaultValue,
      fieldId = _ref.fieldId,
      placeholder = _ref.placeholder,
      required = _ref.required,
      type = _ref.type;

  var _useSpecialField = useSpecialField({
    fieldId: fieldId,
    defaultValue: defaultValue
  }),
      fieldState = _useSpecialField.fieldState,
      update = _useSpecialField.update;

  return React.createElement("input", {
    required: required,
    className: "fresh-input fresh-input-" + type + " " + className,
    placeholder: placeholder,
    id: "fresh-" + fieldId,
    type: type,
    value: fieldState || '',
    onChange: function onChange(e) {
      update({
        id: fieldId,
        value: e.target.value
      });
    }
  });
};

var Toggle = function Toggle(_ref) {
  var fieldId = _ref.fieldId,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? false : _ref$defaultValue,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className;

  var _useSpecialField = useSpecialField({
    fieldId: fieldId,
    defaultValue: defaultValue
  }),
      fieldState = _useSpecialField.fieldState,
      update = _useSpecialField.update;

  return React.createElement("div", {
    className: className + " fresh-switch"
  }, React.createElement("input", {
    checked: fieldState || '',
    type: "checkbox",
    id: "fresh-" + fieldId,
    className: "fresh-input-toggle",
    onChange: function onChange() {}
  }), React.createElement("span", {
    className: "fresh-slider",
    onClick: function onClick() {
      return update({
        id: fieldId,
        value: !fieldState
      });
    }
  }));
};

var camelCase = function camelCase(str) {
  return str.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, function (match, index) {
    if (+match === 0) return '';
    return index == 0 ? match.toLowerCase() : match.toUpperCase();
  });
};

var Field = function Field(_ref) {
  var _ref$required = _ref.required,
      required = _ref$required === void 0 ? false : _ref$required,
      children = _ref.children,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? '' : _ref$name,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'text' : _ref$type,
      _ref$label = _ref.label,
      label = _ref$label === void 0 ? true : _ref$label,
      error = _ref.error,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? '' : _ref$placeholder,
      options = _ref.options,
      strength = _ref.strength,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? '' : _ref$defaultValue,
      _ref$displayProperty = _ref.displayProperty,
      displayProperty = _ref$displayProperty === void 0 ? '' : _ref$displayProperty,
      tooltip = _ref.tooltip,
      tooltipBackground = _ref.tooltipBackground,
      tooltipColor = _ref.tooltipColor,
      tooltipIconColor = _ref.tooltipIconColor;
  var fieldId = name || camelCase(children);
  var standardProps = {
    children: children,
    required: required,
    name: name,
    type: type,
    label: label,
    error: error,
    placeholder: placeholder,
    options: options,
    className: className,
    defaultValue: defaultValue,
    displayProperty: displayProperty
  };
  return React.createElement("div", {
    className: "fresh-field-wrapper " + fieldId
  }, React.createElement("label", {
    className: "fresh-label",
    htmlFor: "fresh-" + fieldId
  }, React.createElement("span", {
    className: "fresh-title"
  }, required && '*', " ", label && children, "\xA0", tooltip && React.createElement(Tooltip, {
    tooltip: tooltip,
    tooltipBackground: tooltipBackground,
    tooltipColor: tooltipColor,
    tooltipIconColor: tooltipIconColor
  })), function () {
    switch (type) {
      case 'select':
        return React.createElement(Select, Object.assign({
          fieldId: fieldId
        }, standardProps));

      case 'reference':
        return React.createElement(Reference, Object.assign({
          fieldId: fieldId
        }, standardProps));

      case 'password':
        return React.createElement(Password, Object.assign({
          strength: strength,
          fieldId: fieldId
        }, standardProps));

      case 'tags':
        return React.createElement(Tags, Object.assign({
          fieldId: fieldId
        }, standardProps));

      case 'textarea':
        return React.createElement(TextArea, Object.assign({
          fieldId: fieldId
        }, standardProps));

      case 'number':
        return React.createElement(NumberField, Object.assign({
          fieldId: fieldId
        }, standardProps));

      case 'markdown':
        return React.createElement(TextArea$1, Object.assign({
          fieldId: fieldId
        }, standardProps));

      case 'toggle':
        return React.createElement(Toggle, Object.assign({
          fieldId: fieldId
        }, standardProps));

      default:
        return React.createElement(Text, Object.assign({
          fieldId: fieldId
        }, standardProps));
    }
  }()), error && React.createElement("div", {
    className: "fresh-error"
  }, error));
};

Field.defaultProps = {
  defaultValue: null,
  options: [],
  tooltip: '',
  tooltipBackground: '#eee',
  tooltipColor: '#000',
  tooltipIconColor: '#000'
};

var Form = function Form(_ref) {
  var _ref$defaultValues = _ref.defaultValues,
      defaultValues = _ref$defaultValues === void 0 ? {} : _ref$defaultValues,
      rest = _objectWithoutPropertiesLoose(_ref, ["defaultValues"]);

  return React.createElement(FormProvider, {
    defaultValues: defaultValues
  }, React.createElement(Global, null), React.createElement(FormWrapper, Object.assign({}, rest)));
};

var FormWrapper = function FormWrapper(_ref2) {
  var _ref2$cancelAction = _ref2.cancelAction,
      cancelAction = _ref2$cancelAction === void 0 ? function () {
    return null;
  } : _ref2$cancelAction,
      _ref2$cancelButton = _ref2.cancelButton,
      cancelButton = _ref2$cancelButton === void 0 ? true : _ref2$cancelButton,
      _ref2$cancelText = _ref2.cancelText,
      cancelText = _ref2$cancelText === void 0 ? 'Cancel' : _ref2$cancelText,
      children = _ref2.children,
      _ref2$className = _ref2.className,
      className = _ref2$className === void 0 ? '' : _ref2$className,
      _onSubmit = _ref2.onSubmit,
      _ref2$submitText = _ref2.submitText,
      submitText = _ref2$submitText === void 0 ? 'Submit' : _ref2$submitText;

  var _useContext = useContext(FormContext),
      formState = _useContext.formState;

  return React.createElement("form", {
    className: className + " fresh-form",
    onSubmit: function onSubmit(e) {
      e.preventDefault();

      var data = _extends({}, formState);

      delete data.defaultValues;

      _onSubmit(data);
    }
  }, children, React.createElement("div", null, React.createElement("button", {
    id: "fresh-submit",
    className: "fresh-button fresh-submit",
    type: "submit"
  }, submitText), cancelButton && React.createElement(CancelButton, {
    cancelAction: cancelAction,
    cancelText: cancelText
  })));
}; // TODO

export { Field, Form };
//# sourceMappingURL=fresh.esm.js.map
