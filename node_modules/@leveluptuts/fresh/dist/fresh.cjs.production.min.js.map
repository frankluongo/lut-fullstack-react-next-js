{"version":3,"file":"fresh.cjs.production.min.js","sources":["../src/state/State.tsx","../src/style.tsx","../src/form/CancelButton.tsx","../src/form/Tooltip.tsx","../src/hooks/useSpecialField.ts","../src/fields/Select.tsx","../src/fields/Reference.tsx","../src/fields/Password.tsx","../src/fields/Tags.tsx","../src/fields/TextArea.tsx","../src/fields/Number.tsx","../src/fields/Markdown.tsx","../src/fields/Text.tsx","../src/fields/Toggle.tsx","../src/Field.tsx","../src/index.tsx"],"sourcesContent":["import React, { useReducer, createContext, ReactNode } from 'react'\n\nexport interface ContextArguments {\n  id: string\n  value: string | boolean | number | object\n}\n\nexport interface FieldStateInterface {\n  formState: object\n  update(fieldData: ContextArguments): void\n  registerField(fieldData: ContextArguments): void\n  resetForm(): void\n}\n\nexport const FormContext = createContext<FieldStateInterface | null>(null)\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'update':\n      const data = {}\n      data[action.id] = action.value\n      return { ...state, ...data }\n\n    case 'registerField':\n      const temp = {\n        ...state,\n      }\n\n      // Adds blank value if default doesn't exist\n      if (!temp[action.id]) {\n        temp[action.id] = action.value\n      }\n\n      // Add field based default values if one doesn't exist\n      if (!temp.defaultValues[action.id]) {\n        temp.defaultValues[action.id] = action.value || ''\n      }\n\n      return temp\n\n    case 'resetForm':\n      const { defaultValues } = state\n      return {\n        defaultValues,\n        ...state.defaultValues,\n      }\n\n    default:\n      throw new Error()\n  }\n}\n\nexport function FormProvider({\n  children,\n  defaultValues,\n}: {\n  children: ReactNode\n  defaultValues: object\n}) {\n  const [formState, dispatch] = useReducer(reducer, {\n    defaultValues,\n    ...defaultValues,\n  })\n\n  const ContextProvider: FieldStateInterface = {\n    formState,\n    update: ({ id, value }) => dispatch({ type: 'update', id, value }),\n    registerField: ({ id, value }) =>\n      dispatch({ type: 'registerField', id, value }),\n    resetForm: () => dispatch({ type: 'resetForm' }),\n  }\n\n  return (\n    <FormContext.Provider value={ContextProvider}>\n      {children}\n    </FormContext.Provider>\n  )\n}\n","import { createGlobalStyle } from 'styled-components'\n\nconst Global = createGlobalStyle`\n  :root {\n    --fresh-tooltip-color: #000;\n    --fresh-tooltip-background: #eee;\n  }\n\n  .fresh-switch {\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 34px;\n    margin: 0.5em 0px;\n  }\n\n  .fresh-switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n\n  .fresh-slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: #ccc;\n    transition: 0.4s;\n    border-radius: 34px;\n  }\n\n  .fresh-slider:before {\n    position: absolute;\n    content: '';\n    height: 26px;\n    width: 26px;\n    left: 4px;\n    bottom: 4px;\n    background-color: white;\n    transition: 0.4s;\n    border-radius: 50%;\n  }\n\n  input:checked + .fresh-slider {\n    background-color: #2196f3;\n  }\n\n  input:focus + .fresh-slider {\n    box-shadow: 0 0 1px #2196f3;\n  }\n\n  input:checked + .fresh-slider:before {\n    transform: translateX(26px);\n  }\n\n  input,\n  select,\n  textarea,\n  .fresh-input {\n    background-color: transparent;\n    box-sizing: border-box;\n    box-shadow: none;\n    max-width: 100%;\n    border-width: 1px;\n    border-style: solid;\n    border-image: initial;\n    border-color: inherit;\n    border-radius: 3px;\n    font: inherit;\n    margin: 0.5em 0px;\n    padding: 0.75em;\n    transition: border-color 0.2s ease 0s;\n  }\n\n  textarea,\n  .fresh-input-textarea,\n  .fresh-input-markdown {\n    min-height: 6rem;\n  }\n\n  .fresh-markdown-wrapper {\n    .fresh-input-markdown {\n      border-color: #eee; \n    }\n    .fresh-input-textarea,\n    .fresh-input-markdown {\n      width: 100%;\n    }\n    @media (min-width: 800px) {\n      display: flex;\n      .fresh-input-textarea {\n        width: 50%;  \n      }\n      \n      .fresh-input-markdown {\n        width: calc(50% - 0.5em);  \n        margin-left: 0.5em;\n      }\n    }\n  }\n  \n  /* Label and Tooltip */\n  .fresh-focused {\n    border: 1px solid #eee;\n    max-height: 200px;\n    overflow-y: scroll;\n    position: absolute;\n    background: white;\n    width: 100%;\n    margin-top: -0.5em;\n    border-top: 0;\n  }\n\n  .fresh-label {\n    position: relative;\n  }\n\n  .fresh-title {\n    display: flex; \n    align-items: center;\n    .fresh-tooltip {\n      position: relative;\n      color: var(--fresh-tooltip-color);\n      &:after {\n        position: absolute;\n        left: 150%;\n        min-width: 100px;\n        content: attr(data-tooltip);\n        opacity: 0;\n        transition: all .3s ease-in-out .35s;\n        visibility: hidden;\n        z-index: 2;\n        position: absolute;\n        background-color: var(--fresh-tooltip-background);\n        padding: 0.75em;\n        border-radius: 3px;\n        font-size: 0.8em;\n      }\n      &:hover:after {\n        opacity: 1;\n        left: 130%;\n        visibility: visible;\n      }\n      .fresh-tooltip-icon {\n        position: relative;\n        height: 0.8em;\n        width: 0.8em;\n        min-height: 0.8em;\n        min-width: 0.8em;\n      }\n    }\n  }\n\n  /* Reference Field */\n  .fresh-focused {\n    border: 1px solid #eee;\n    max-height: 200px;\n    overflow-y: scroll;\n    position: absolute;\n    background: white;\n    width: 100%;\n    margin-top: -0.5em;\n    border-top: 0;\n  }\n\n  /* Tag Field */\n  .fresh-input-tags {\n    margin-top: 1rem;\n  }\n\n  .react-tagsinput-tag {\n    background: #eee;\n    padding: 6px 10px;\n    margin: 0 6px 0 0;\n  }\n\n  .react-tagsinput-input {\n    margin-top: 1rem;\n    display: block;\n  }\n\n  /* Toggle Field */\n  .fresh-switch {\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 34px;\n    margin: 0.5em 0px;\n    .fresh-input-toggle {\n      opacity: 0;\n      width: 0;\n      height: 0;\n    }\n    .fresh-slider {\n      position: absolute;\n      cursor: pointer;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: var(--fresh-toggle-color);\n      transition: 0.4s;\n      border-width: 1px;\n      border-style: solid;\n      border-image: initial;\n      border-color: inherit;\n      border-radius: 34px;\n      &.on {\n        background-color: var(--fresh-toggle-on-color);\n        &:focus {\n          box-shadow: 0 0 1px var(--fresh-toggle-on-color);\n        }\n        &:before {\n          transform: translateX(26px);\n        }\n      }\n      &:before {\n        position: absolute;\n        content: '';\n        height: 26px;\n        width: 26px;\n        left: 2px;\n        bottom: 2px;\n        background-color: white;\n        transition: 0.4s;\n        border-width: 1px;\n        border-style: solid;\n        border-image: initial;\n        border-color: inherit;\n        border-radius: 50%;\n      }\n    }\n  }\n`\n\nexport default Global\n","import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport { FormContext } from '../state/State'\n\nconst CancelButton = ({ cancelAction, cancelText }) => {\n  const { resetForm } = useContext(FormContext)\n\n  return (\n    <button\n      id=\"fresh-cancel\"\n      className=\"fresh-button fresh-cancel\"\n      onClick={() => {\n        cancelAction()\n        resetForm()\n      }}\n      type=\"reset\"\n    >\n      {cancelText}\n    </button>\n  )\n}\n\nCancelButton.propTypes = {\n  cancelAction: PropTypes.func.isRequired,\n  cancelText: PropTypes.string,\n}\n\nCancelButton.defaultProps = {\n  cancelText: 'Cancel',\n}\nexport default CancelButton\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\ninterface TooltipInterface {\n  tooltip: string\n  tooltipBackground: string\n  tooltipColor: string\n  tooltipIconColor: string\n}\n\nconst Tooltip = ({\n  tooltip,\n  tooltipBackground,\n  tooltipColor,\n  tooltipIconColor,\n}: TooltipInterface) => {\n  const tooltipStyle = {\n    '--fresh-tooltip-background': tooltipBackground,\n    '--fresh-tooltip-color': tooltipColor,\n    '--fresh-tooltip-icon-color': tooltipIconColor,\n  } as React.CSSProperties\n  return (\n    <span className=\"fresh-tooltip\" data-tooltip={tooltip} style={tooltipStyle}>\n      <svg\n        className=\"fresh-tooltip-icon\"\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16ZM9.02539 5.91797H5.84668V7.79102H6.91309V11.127H5.84668V13H10.0098V11.127H9.02539V5.91797ZM6.89258 3.16309C6.83333 3.30892 6.80371 3.46615 6.80371 3.63477C6.80371 3.80339 6.83333 3.96289 6.89258 4.11328C6.95638 4.25911 7.04297 4.38672 7.15234 4.49609C7.26172 4.60547 7.38932 4.69206 7.53516 4.75586C7.68555 4.81966 7.84733 4.85156 8.02051 4.85156C8.18457 4.85156 8.33952 4.81966 8.48535 4.75586C8.63118 4.69206 8.75879 4.60547 8.86816 4.49609C8.97754 4.38672 9.06413 4.25911 9.12793 4.11328C9.19173 3.96289 9.22363 3.80339 9.22363 3.63477C9.22363 3.46615 9.19173 3.30892 9.12793 3.16309C9.06413 3.0127 8.97754 2.88281 8.86816 2.77344C8.75879 2.66406 8.63118 2.57747 8.48535 2.51367C8.33952 2.44987 8.18457 2.41797 8.02051 2.41797C7.84733 2.41797 7.68555 2.44987 7.53516 2.51367C7.38932 2.57747 7.26172 2.66406 7.15234 2.77344C7.04297 2.88281 6.95638 3.0127 6.89258 3.16309Z\"\n          fill={tooltipIconColor}\n        />\n      </svg>\n    </span>\n  )\n}\n\nTooltip.propTypes = {\n  tooltip: PropTypes.string,\n  tooltipBackground: PropTypes.string,\n  tooltipColor: PropTypes.string,\n  tooltipIconColor: PropTypes.string,\n}\n\nTooltip.defaultProps = {\n  tooltip: '',\n  tooltipBackground: '#eee',\n  tooltipColor: '#000',\n  tooltipIconColor: '#000',\n}\nexport default Tooltip\n","import { useContext, useEffect } from 'react'\nimport { FormContext, FieldStateInterface } from '../state/State'\n\ninterface useSFInterface {\n  fieldId: string\n  defaultValue: string | boolean | number | object\n}\n\nfunction useSpecialField({ fieldId, defaultValue }: useSFInterface) {\n  const { registerField, formState, update } = useContext<FieldStateInterface>(\n    FormContext\n  )\n\n  useEffect(() => {\n    registerField({\n      id: fieldId,\n      value: defaultValue,\n    })\n  }, [])\n\n  return { formState, update, fieldState: formState[fieldId] }\n}\n\nexport default useSpecialField\n","import React from 'react'\nimport useSpecialField from '../hooks/useSpecialField'\nimport { FieldInterface } from './types'\n\nconst Select = ({ options, fieldId, defaultValue = 0 }: FieldInterface) => {\n  const { fieldState, update } = useSpecialField({ fieldId, defaultValue })\n  return (\n    <select\n      id={`fresh-${fieldId}`}\n      className=\"fresh-input fresh-input-select\"\n      onChange={e => update({ id: fieldId, value: e.target.value })}\n      value={fieldState}\n    >\n      {options.map(option => (\n        <option value={option} key={option} className=\"fresh-option\">\n          {option}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nexport default Select\n","import React, { useState } from 'react'\nimport useSpecialField from '../hooks/useSpecialField'\nimport { FieldInterface } from './types'\n\nconst Reference = ({\n  options,\n  fieldId,\n  displayProperty,\n  defaultValue = {},\n  placeholder = '',\n}: FieldInterface) => {\n  const { update } = useSpecialField({ fieldId, defaultValue })\n  const [inputValue, setInputValue] = useState('')\n  const [isFocused, setIsFocused] = useState(false)\n  return (\n    <>\n      <input\n        id={`fresh-${fieldId}`}\n        onChange={e => setInputValue(e.target.value)}\n        value={inputValue}\n        onFocus={() => setIsFocused(true)}\n        onBlur={() => setIsFocused(false)}\n        placeholder={placeholder}\n        type=\"text\"\n        className=\"fresh-input fresh-input-reference\"\n      />\n      {isFocused && (\n        <div className=\"fresh-focused\">\n          {options\n            .filter(option =>\n              option[displayProperty]\n                .toLowerCase()\n                .includes(inputValue.toLowerCase())\n            )\n            .map(option => (\n              <div\n                key={option.id}\n                style={{ padding: '0.75em' }}\n                onMouseDown={() => {\n                  update({ id: fieldId, value: option })\n                  setInputValue(option[displayProperty])\n                }}\n              >\n                {option[displayProperty]}\n              </div>\n            ))}\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default Reference\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport useSpecialField from '../hooks/useSpecialField'\nimport { FieldInterface } from './types'\n\nconst Password = ({\n  className,\n  defaultValue = '',\n  fieldId,\n  placeholder,\n  required,\n  strength = true,\n  type,\n}: FieldInterface) => {\n  const { fieldState, update } = useSpecialField({ fieldId, defaultValue })\n  const strengthValue = calculateScore(fieldState || '')\n  let strengthMeter = {\n    background: '#ccc',\n    width: 'calc(193px * 0.25)',\n  }\n  if (strengthValue === 2) {\n    strengthMeter = {\n      width: 'calc(193px * 0.5)',\n      background: 'red',\n    }\n  } else if (strengthValue === 3) {\n    strengthMeter = {\n      width: 'calc(193px * 0.75)',\n      background: 'red',\n    }\n  } else if (strengthValue === 4) {\n    strengthMeter = {\n      width: 'calc(193px * 1)',\n      background: 'green',\n    }\n  }\n  return (\n    <>\n      <input\n        className={`fresh-input fresh-input-password ${className}`}\n        placeholder={placeholder}\n        type={type}\n        required={required}\n        value={fieldState || ''}\n        id={`fresh-${fieldId}`}\n        onChange={e => update({ value: e.target.value, id: fieldId })}\n      />\n      {strength && (\n        <div\n          style={{\n            height: '4px',\n            marginBottom: '1rem',\n            transition: '0.3s ease all',\n            ...strengthMeter,\n          }}\n        />\n      )}\n    </>\n  )\n}\n\nPassword.propTypes = {\n  strength: PropTypes.bool,\n  placeholder: PropTypes.string,\n}\n\nPassword.defaultProps = {\n  placeholder: '',\n}\n\nexport default Password\n\nconst options = {\n  showText: true,\n  fieldPartialMatch: true,\n  minimumLength: 4,\n}\n\nfunction calculateScore(password: string) {\n  var score = 0\n\n  // password < options.minimumLength\n  if (password.length < options.minimumLength) {\n    return -1\n  }\n  // password length\n  score += password.length * 4\n\n  // password has 3 numbers\n  if (password.match(/(.*[0-9].*[0-9].*[0-9])/)) {\n    score += 5\n  }\n\n  // password has at least 2 sybols\n  var symbols: any = '.*[!,@,#,$,%,^,&,*,?,_,~]'\n  symbols = new RegExp('(' + symbols + symbols + ')')\n  if (password.match(symbols)) {\n    score += 5\n  }\n\n  // password has Upper and Lower chars\n  if (password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)) {\n    score += 10\n  }\n\n  // password has number and chars\n  if (password.match(/([a-zA-Z])/) && password.match(/([0-9])/)) {\n    score += 15\n  }\n\n  // password has number and symbol\n  if (\n    password.match(/([!,@,#,$,%,^,&,*,?,_,~])/) &&\n    password.match(/([0-9])/)\n  ) {\n    score += 15\n  }\n\n  // password has char and symbol\n  if (\n    password.match(/([!,@,#,$,%,^,&,*,?,_,~])/) &&\n    password.match(/([a-zA-Z])/)\n  ) {\n    score += 15\n  }\n\n  // password is just numbers or chars\n  if (password.match(/^\\w+$/) || password.match(/^\\d+$/)) {\n    score -= 10\n  }\n\n  if (score > 100) {\n    score = 100\n  }\n\n  if (score < 0) {\n    score = 0\n  }\n\n  return score * 0.04\n}\n","import React from 'react'\nimport useSpecialField from '../hooks/useSpecialField'\nimport TagsInput from 'react-tagsinput'\nimport { FieldInterface } from './types'\n\nconst Tags = ({ defaultValue = [], fieldId }: FieldInterface) => {\n  const { update, fieldState } = useSpecialField({ fieldId, defaultValue })\n\n  return (\n    <TagsInput\n      value={fieldState || []}\n      onChange={value => update({ id: fieldId, value })}\n      className=\"fresh-input-tags\"\n      id={`fresh-${fieldId}`}\n      style={{\n        marginTop: '1rem',\n      }}\n    />\n  )\n}\n\nexport default Tags\n","import React from 'react'\nimport useSpecialField from '../hooks/useSpecialField'\n\ninterface RefValue {\n  id: string\n  text: string\n}\n\ntype Props = {\n  required?: boolean\n  children: string\n  type?: string\n  fieldId?: string\n  name?: string\n  label?: boolean\n  error?: string\n  placeholder?: string\n  options: any\n  className?: string\n  defaultValue?: string | boolean | number | [] | RefValue | {}\n  tooltip?: string\n  strength?: boolean\n  tooltipBackground?: string\n  tooltipColor?: string\n  tooltipIconColor?: string\n  displayProperty?: string\n}\n\nexport const TextArea: React.FC<Props> = ({\n  defaultValue = '',\n  fieldId,\n  placeholder,\n}) => {\n  const { fieldState, update } = useSpecialField({ fieldId, defaultValue })\n  return (\n    <textarea\n      id={`fresh-${fieldId}`}\n      placeholder={placeholder}\n      value={fieldState || ''}\n      className=\"fresh-input fresh-input-textarea\"\n      onChange={e => update({ id: fieldId, value: e.target.value })}\n    />\n  )\n}\n\nexport default TextArea\n","import React from 'react'\nimport useSpecialField from '../hooks/useSpecialField'\nimport { FieldInterface } from './types'\n\nconst NumberField = ({\n  fieldId,\n  defaultValue = null,\n  placeholder,\n  required,\n  className,\n}: FieldInterface) => {\n  const { fieldState, update } = useSpecialField({\n    fieldId,\n    defaultValue,\n  })\n  return (\n    <>\n      <input\n        required={required}\n        className={`fresh-input fresh-input-number ${className}`}\n        placeholder={placeholder}\n        id={`fresh-${fieldId}`}\n        type=\"number\"\n        value={fieldState || ''}\n        onChange={e => {\n          const value = e.target.value ? parseInt(e.target.value) : null\n          update({ id: fieldId, value })\n        }}\n      />\n    </>\n  )\n}\n\nexport default NumberField\n","import React from 'react'\nimport Markdown from 'markdown-to-jsx'\nimport useSpecialField from '../hooks/useSpecialField'\nimport { FieldInterface } from './types'\n\nexport const TextArea = ({\n  defaultValue = '',\n  fieldId,\n  placeholder,\n}: FieldInterface) => {\n  const { fieldState, update } = useSpecialField({ fieldId, defaultValue })\n  return (\n    <div className=\"fresh-markdown-wrapper\">\n      <textarea\n        id={`fresh-${fieldId}`}\n        placeholder={placeholder}\n        value={fieldState || ''}\n        className=\"fresh-input fresh-input-textarea\"\n        onChange={e => update({ id: fieldId, value: e.target.value })}\n      />\n      <div className=\"fresh-input fresh-input-markdown\">\n        <Markdown children={fieldState || ''} />\n      </div>\n    </div>\n  )\n}\n\nexport default TextArea\n","import React from 'react'\nimport useSpecialField from '../hooks/useSpecialField'\nimport { FieldInterface } from './types'\n\nconst Text = ({\n  className,\n  defaultValue,\n  fieldId,\n  placeholder,\n  required,\n  type,\n}: FieldInterface) => {\n  const { fieldState, update } = useSpecialField({\n    fieldId,\n    defaultValue,\n  })\n  return (\n    <input\n      required={required}\n      className={`fresh-input fresh-input-${type} ${className}`}\n      placeholder={placeholder}\n      id={`fresh-${fieldId}`}\n      type={type}\n      value={fieldState || ''}\n      onChange={e => {\n        update({ id: fieldId, value: e.target.value })\n      }}\n    />\n  )\n}\n\nexport default Text\n","import React from 'react'\nimport { FieldInterface } from './types'\nimport useSpecialField from '../hooks/useSpecialField'\n\nconst Toggle = ({\n  fieldId,\n  defaultValue = false,\n  className = '',\n}: FieldInterface) => {\n  const { fieldState, update } = useSpecialField({ fieldId, defaultValue })\n  return (\n    <div className={`${className} fresh-switch`}>\n      <input\n        checked={fieldState || ''}\n        type=\"checkbox\"\n        id={`fresh-${fieldId}`}\n        className=\"fresh-input-toggle\"\n        onChange={() => {}}\n      />\n      <span\n        className={`fresh-slider`}\n        onClick={() => update({ id: fieldId, value: !fieldState })}\n      />\n    </div>\n  )\n}\n\nexport default Toggle\n","import React from 'react'\nimport { FieldInterface } from './fields/types'\nimport Tooltip from './form/Tooltip'\nimport Select from './fields/Select'\nimport Reference from './fields/Reference'\nimport Password from './fields/Password'\nimport Tags from './fields/Tags'\nimport TextArea from './fields/TextArea'\nimport NumberField from './fields/Number'\nimport Markdown from './fields/Markdown'\nimport Text from './fields/Text'\nimport Toggle from './fields/Toggle'\n\nconst kebabCase = str =>\n  str\n    .replace(/([a-z])([A-Z])/g, '$1-$2')\n    .replace(/[\\s_]+/g, '-')\n    .toLowerCase()\n\nconst camelCase = str => {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function(match, index) {\n    if (+match === 0) return ''\n    return index == 0 ? match.toLowerCase() : match.toUpperCase()\n  })\n}\n\nconst Field = ({\n  required = false,\n  children,\n  name = '',\n  type = 'text',\n  label = true,\n  error,\n  placeholder = '',\n  options,\n  strength,\n  className = '',\n  defaultValue = '',\n  displayProperty = '',\n  tooltip,\n  tooltipBackground,\n  tooltipColor,\n  tooltipIconColor,\n}: FieldInterface) => {\n  const fieldId = name || camelCase(children)\n\n  const standardProps = {\n    children,\n    required,\n    name,\n    type,\n    label,\n    error,\n    placeholder,\n    options,\n    className,\n    defaultValue,\n    displayProperty,\n  }\n\n  return (\n    <div className={`fresh-field-wrapper ${fieldId}`}>\n      <label className=\"fresh-label\" htmlFor={`fresh-${fieldId}`}>\n        <span className=\"fresh-title\">\n          {required && '*'} {label && children}&nbsp;\n          {tooltip && (\n            <Tooltip\n              tooltip={tooltip}\n              tooltipBackground={tooltipBackground}\n              tooltipColor={tooltipColor}\n              tooltipIconColor={tooltipIconColor}\n            />\n          )}\n        </span>\n        {(() => {\n          switch (type) {\n            case 'select':\n              return <Select fieldId={fieldId} {...standardProps} />\n            case 'reference':\n              return <Reference fieldId={fieldId} {...standardProps} />\n            case 'password':\n              return (\n                <Password\n                  strength={strength}\n                  fieldId={fieldId}\n                  {...standardProps}\n                />\n              )\n            case 'tags':\n              return <Tags fieldId={fieldId} {...standardProps} />\n            case 'textarea':\n              return <TextArea fieldId={fieldId} {...standardProps} />\n            case 'number':\n              return <NumberField fieldId={fieldId} {...standardProps} />\n            case 'markdown':\n              return <Markdown fieldId={fieldId} {...standardProps} />\n            case 'toggle':\n              return <Toggle fieldId={fieldId} {...standardProps} />\n            default:\n              return <Text fieldId={fieldId} {...standardProps} />\n          }\n        })()}\n      </label>\n      {error && <div className=\"fresh-error\">{error}</div>}\n    </div>\n  )\n}\n\nField.defaultProps = {\n  defaultValue: null,\n  options: [],\n  tooltip: '',\n  tooltipBackground: '#eee',\n  tooltipColor: '#000',\n  tooltipIconColor: '#000',\n}\n\nexport default Field\n","import React, { useContext, ReactNode } from 'react'\nimport { FormProvider, FormContext, FieldStateInterface } from './state/State'\nimport Global from './style'\nimport CancelButton from './form/CancelButton'\nexport { default as Field } from './Field'\n\ninterface defaultValuesInterface {\n  defaultValues?: object\n}\n\ninterface FormProps {\n  defaultValues?: defaultValuesInterface\n}\n\nconst Form = ({ defaultValues = {}, ...rest }: FormProps) => {\n  return (\n    <FormProvider defaultValues={defaultValues}>\n      <Global />\n      <FormWrapper {...(rest as FormWrapperInterface)} />\n    </FormProvider>\n  )\n}\n\ninterface FormWrapperInterface {\n  cancelAction(): void\n  cancelButton?: boolean\n  cancelText?: string\n  children: ReactNode | ReactNode[]\n  className?: string\n  onSubmit(formState: object): void\n  submitText?: string\n}\n\nconst FormWrapper = ({\n  cancelAction = () => null,\n  cancelButton = true,\n  cancelText = 'Cancel',\n  children,\n  className = '',\n  onSubmit,\n  submitText = 'Submit',\n}: FormWrapperInterface) => {\n  const { formState }: FieldStateInterface = useContext(FormContext)\n\n  return (\n    <form\n      className={`${className} fresh-form`}\n      onSubmit={e => {\n        e.preventDefault()\n        const data: defaultValuesInterface = { ...formState }\n        delete data.defaultValues\n        onSubmit(data)\n      }}\n    >\n      {children}\n      <div>\n        <button\n          id=\"fresh-submit\"\n          className=\"fresh-button fresh-submit\"\n          type=\"submit\"\n        >\n          {submitText}\n        </button>\n        {cancelButton && (\n          <CancelButton cancelAction={cancelAction} cancelText={cancelText} />\n        )}\n      </div>\n    </form>\n  )\n}\n\n// TODO\n// AUto form prop that allows for automatic form building via graphql. Required fields and all\n\n// Future api idea <Form mutation={GRAPHQL_MUTATION} /> one liner\n\n// Reset on submit option\nexport { Form }\n"],"names":["FormContext","createContext","reducer","state","action","type","data","id","value","temp","defaultValues","Error","FormProvider","children","useReducer","dispatch","React","Provider","formState","update","registerField","resetForm","Global","createGlobalStyle","_templateObject","CancelButton","cancelAction","cancelText","useContext","className","onClick","propTypes","PropTypes","func","isRequired","string","defaultProps","Tooltip","tooltipIconColor","tooltip","style","tooltipBackground","tooltipColor","width","height","viewBox","fill","xmlns","fillRule","clipRule","d","useSpecialField","fieldId","defaultValue","useEffect","fieldState","Select","options","onChange","e","target","map","option","key","Reference","displayProperty","placeholder","useState","inputValue","setInputValue","isFocused","setIsFocused","onFocus","onBlur","filter","toLowerCase","includes","padding","onMouseDown","Password","required","strength","strengthValue","password","score","length","minimumLength","match","symbols","RegExp","calculateScore","strengthMeter","background","marginBottom","transition","bool","showText","fieldPartialMatch","Tags","TagsInput","marginTop","TextArea","NumberField","parseInt","Markdown","Text","Toggle","checked","Field","name","label","error","replace","index","toUpperCase","standardProps","htmlFor","FormWrapper","cancelButton","onSubmit","submitText","preventDefault","rest"],"mappings":"0bAcO,IAAMA,EAAcC,gBAA0C,MAErE,SAASC,EAAQC,EAAOC,UACdA,EAAOC,UACR,aACGC,EAAO,UACbA,EAAKF,EAAOG,IAAMH,EAAOI,WACbL,KAAUG,OAEnB,oBACGG,OACDN,UAIAM,EAAKL,EAAOG,MACfE,EAAKL,EAAOG,IAAMH,EAAOI,OAItBC,EAAKC,cAAcN,EAAOG,MAC7BE,EAAKC,cAAcN,EAAOG,IAAMH,EAAOI,OAAS,IAG3CC,MAEJ,sBAGDC,cAFwBP,EAAlBO,eAGHP,EAAMO,6BAIL,IAAIC,gBAIAC,SACdC,IAAAA,SACAH,IAAAA,gBAK8BI,aAAWZ,KACvCQ,cAAAA,GACGA,IAFaK,cAchBC,gBAAChB,EAAYiB,UAAST,MATqB,CAC3CU,eACAC,OAAQ,mBAAmBJ,EAAS,CAAEV,KAAM,SAAUE,KAA3CA,GAA+CC,QAA3CA,SACfY,cAAe,mBACbL,EAAS,CAAEV,KAAM,gBAAiBE,KADlBA,GACsBC,QADlBA,SAEtBa,UAAW,kBAAMN,EAAS,CAAEV,KAAM,iBAK/BQ,myJCxEP,IAAMS,EAASC,oBAAHC,KCENC,EAAe,gBAAGC,IAAAA,aAAcC,IAAAA,WAC5BN,EAAcO,aAAW5B,GAAzBqB,iBAGNL,0BACET,GAAG,eACHsB,UAAU,4BACVC,QAAS,WACPJ,IACAL,KAEFhB,KAAK,SAEJsB,IAKPF,EAAaM,UAAY,CACvBL,aAAcM,EAAUC,KAAKC,WAC7BP,WAAYK,EAAUG,QAGxBV,EAAaW,aAAe,CAC1BT,WAAY,UClBd,IAAMU,EAAU,gBAIdC,IAAAA,wBAQEtB,wBAAMa,UAAU,iCAXlBU,QAWyDC,MANpC,gCAJrBC,4CACAC,0CAMgCJ,IAI5BtB,uBACEa,UAAU,qBACVc,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,KAAK,OACLC,MAAM,8BAEN/B,wBACEgC,SAAS,UACTC,SAAS,UACTC,EAAE,w9BACFJ,KAAMR,OC3BhB,SAASa,SAAkBC,IAAAA,QAASC,IAAAA,eACWzB,aAC3C5B,GADMoB,IAAAA,cAAeF,IAAAA,UAAWC,IAAAA,cAIlCmC,YAAU,WACRlC,EAAc,CACZb,GAAI6C,EACJ5C,MAAO6C,KAER,IAEI,CAAEnC,UAAAA,EAAWC,OAAAA,EAAQoC,WAAYrC,EAAUkC,IDsBpDf,EAAQN,UAAY,CAClBQ,QAASP,EAAUG,OACnBM,kBAAmBT,EAAUG,OAC7BO,aAAcV,EAAUG,OACxBG,iBAAkBN,EAAUG,QAG9BE,EAAQD,aAAe,CACrBG,QAAS,GACTE,kBAAmB,OACnBC,aAAc,OACdJ,iBAAkB,QEjDpB,IAAMkB,EAAS,gBAAGC,IAAAA,QAASL,IAAAA,YAASC,eACHF,EAAgB,CAAEC,QAAAA,EAASC,wBADT,MAC7BlC,IAAAA,cAElBH,0BACET,YAAa6C,EACbvB,UAAU,iCACV6B,SAAU,SAAAC,UAAKxC,EAAO,CAAEZ,GAAI6C,EAAS5C,MAAOmD,EAAEC,OAAOpD,SACrDA,QANI+C,YAQHE,EAAQI,IAAI,SAAAC,UACX9C,0BAAQR,MAAOsD,EAAQC,IAAKD,EAAQjC,UAAU,gBAC3CiC,OCXLE,EAAY,gBAChBP,IAAAA,QACAL,IAAAA,QACAa,IAAAA,oBACAZ,iBACAa,YAAAA,aAAc,KAEN/C,EAAWgC,EAAgB,CAAEC,QAAAA,EAASC,wBAH/B,OAGPlC,SAC4BgD,WAAS,IAAtCC,OAAYC,SACeF,YAAS,GAApCG,OAAWC,cAEhBvD,gCACEA,yBACET,YAAa6C,EACbM,SAAU,SAAAC,UAAKU,EAAcV,EAAEC,OAAOpD,QACtCA,MAAO4D,EACPI,QAAS,kBAAMD,GAAa,IAC5BE,OAAQ,kBAAMF,GAAa,IAC3BL,YAAaA,EACb7D,KAAK,OACLwB,UAAU,sCAEXyC,GACCtD,uBAAKa,UAAU,iBACZ4B,EACEiB,OAAO,SAAAZ,UACNA,EAAOG,GACJU,cACAC,SAASR,EAAWO,iBAExBd,IAAI,SAAAC,UACH9C,uBACE+C,IAAKD,EAAOvD,GACZiC,MAAO,CAAEqC,QAAS,UAClBC,YAAa,WACX3D,EAAO,CAAEZ,GAAI6C,EAAS5C,MAAOsD,IAC7BO,EAAcP,EAAOG,MAGtBH,EAAOG,SCtClBc,EAAW,gBACflD,IAAAA,cACAwB,aACAD,IAAAA,QACAc,IAAAA,YACAc,IAAAA,aACAC,SAAAA,gBACA5E,IAAAA,OAE+B8C,EAAgB,CAAEC,QAAAA,EAASC,wBAP3C,OAOPE,IAAAA,WAAYpC,IAAAA,OACd+D,EA+DR,SAAwBC,OAClBC,EAAQ,KAGRD,EAASE,OAAS5B,EAAQ6B,qBACpB,EAGVF,GAA2B,EAAlBD,EAASE,OAGdF,EAASI,MAAM,6BACjBH,GAAS,OAIPI,EAAe,mCACnBA,EAAU,IAAIC,OAAO,IAAMD,EAAUA,EAAU,KAC3CL,EAASI,MAAMC,KACjBJ,GAAS,GAIPD,EAASI,MAAM,mCACjBH,GAAS,IAIPD,EAASI,MAAM,eAAiBJ,EAASI,MAAM,aACjDH,GAAS,IAKTD,EAASI,MAAM,8BACfJ,EAASI,MAAM,aAEfH,GAAS,IAKTD,EAASI,MAAM,8BACfJ,EAASI,MAAM,gBAEfH,GAAS,KAIPD,EAASI,MAAM,UAAYJ,EAASI,MAAM,YAC5CH,GAAS,IAGPA,EAAQ,MACVA,EAAQ,KAGNA,EAAQ,IACVA,EAAQ,GAGK,IAARA,EA5HeM,CAAenC,GAAc,IAC/CoC,EAAgB,CAClBC,WAAY,OACZjD,MAAO,6BAEa,IAAlBuC,EACFS,EAAgB,CACdhD,MAAO,oBACPiD,WAAY,OAEa,IAAlBV,EACTS,EAAgB,CACdhD,MAAO,qBACPiD,WAAY,OAEa,IAAlBV,IACTS,EAAgB,CACdhD,MAAO,kBACPiD,WAAY,UAId5E,gCACEA,yBACEa,8CAA+CA,EAC/CqC,YAAaA,EACb7D,KAAMA,EACN2E,SAAUA,EACVxE,MAAO+C,GAAc,GACrBhD,YAAa6C,EACbM,SAAU,SAAAC,UAAKxC,EAAO,CAAEX,MAAOmD,EAAEC,OAAOpD,MAAOD,GAAI6C,OAEpD6B,GACCjE,uBACEwB,SACEI,OAAQ,MACRiD,aAAc,OACdC,WAAY,iBACTH,OAQfZ,EAAShD,UAAY,CACnBkD,SAAUjD,EAAU+D,KACpB7B,YAAalC,EAAUG,QAGzB4C,EAAS3C,aAAe,CACtB8B,YAAa,IAGf,IAEMT,EAAU,CACduC,UAAU,EACVC,mBAAmB,EACnBX,cAAe,GCtEXY,EAAO,oBAAG7C,aAAmBD,IAAAA,UACFD,EAAgB,CAAEC,QAAAA,EAASC,wBAD7B,OACrBlC,IAAAA,cAGNH,gBAACmF,GACC3F,QAJY+C,YAIS,GACrBG,SAAU,SAAAlD,UAASW,EAAO,CAAEZ,GAAI6C,EAAS5C,MAAAA,KACzCqB,UAAU,mBACVtB,YAAa6C,EACbZ,MAAO,CACL4D,UAAW,WCaNC,EAA4B,oBACvChD,aACAD,IAAAA,QACAc,IAAAA,cAE+Bf,EAAgB,CAAEC,QAAAA,EAASC,wBAJ3C,OAIKlC,IAAAA,cAElBH,4BACET,YAAa6C,EACbc,YAAaA,EACb1D,QALI+C,YAKiB,GACrB1B,UAAU,mCACV6B,SAAU,SAAAC,UAAKxC,EAAO,CAAEZ,GAAI6C,EAAS5C,MAAOmD,EAAEC,OAAOpD,YCpCrD8F,EAAc,gBAClBlD,IAAAA,YACAC,aACAa,IAAAA,YACAc,IAAAA,SACAnD,IAAAA,YAE+BsB,EAAgB,CAC7CC,QAAAA,EACAC,wBAPa,SAKKlC,IAAAA,cAKlBH,gCACEA,yBACEgE,SAAUA,EACVnD,4CAA6CA,EAC7CqC,YAAaA,EACb3D,YAAa6C,EACb/C,KAAK,SACLG,QAZE+C,YAYmB,GACrBG,SAAU,SAAAC,OACFnD,EAAQmD,EAAEC,OAAOpD,MAAQ+F,SAAS5C,EAAEC,OAAOpD,OAAS,KAC1DW,EAAO,CAAEZ,GAAI6C,EAAS5C,MAAAA,SCrBnB6F,EAAW,oBACtBhD,aACAD,IAAAA,QACAc,IAAAA,cAE+Bf,EAAgB,CAAEC,QAAAA,EAASC,wBAJ3C,OAIPE,IAAAA,WAAYpC,IAAAA,cAElBH,uBAAKa,UAAU,0BACbb,4BACET,YAAa6C,EACbc,YAAaA,EACb1D,MAAO+C,GAAc,GACrB1B,UAAU,mCACV6B,SAAU,SAAAC,UAAKxC,EAAO,CAAEZ,GAAI6C,EAAS5C,MAAOmD,EAAEC,OAAOpD,WAEvDQ,uBAAKa,UAAU,oCACbb,gBAACwF,GAAS3F,SAAU0C,GAAc,QCjBpCkD,EAAO,gBACX5E,IAAAA,UAEAuB,IAAAA,QACAc,IAAAA,YACAc,IAAAA,SACA3E,IAAAA,OAE+B8C,EAAgB,CAC7CC,QAAAA,EACAC,eARFA,eAMoBlC,IAAAA,cAKlBH,yBACEgE,SAAUA,EACVnD,qCAAsCxB,MAAQwB,EAC9CqC,YAAaA,EACb3D,YAAa6C,EACb/C,KAAMA,EACNG,QAXI+C,YAWiB,GACrBG,SAAU,SAAAC,GACRxC,EAAO,CAAEZ,GAAI6C,EAAS5C,MAAOmD,EAAEC,OAAOpD,YCrBxCkG,EAAS,gBACbtD,IAAAA,YACAC,iBACAxB,UAAAA,aAAY,OAEmBsB,EAAgB,CAAEC,QAAAA,EAASC,6BAAlDE,IAAAA,WAAYpC,IAAAA,cAElBH,uBAAKa,UAAcA,mBACjBb,yBACE2F,QAASpD,GAAc,GACvBlD,KAAK,WACLE,YAAa6C,EACbvB,UAAU,qBACV6B,SAAU,eAEZ1C,wBACEa,yBACAC,QAAS,kBAAMX,EAAO,CAAEZ,GAAI6C,EAAS5C,OAAQ+C,SCK/CqD,EAAQ,oBACZ5B,SAAAA,gBACAnE,IAAAA,aACAgG,KAAAA,aAAO,SACPxG,KAAAA,aAAO,aACPyG,MAAAA,gBACAC,IAAAA,UACA7C,YAAAA,aAAc,KACdT,IAAAA,QACAwB,IAAAA,aACApD,UAAAA,aAAY,SACZwB,aAAAA,aAAe,SACfY,gBAAAA,aAAkB,KAClB1B,IAAAA,QACAE,IAAAA,kBACAC,IAAAA,aACAJ,IAAAA,iBAEMc,EAAUyD,GAAkBhG,EAxBvBmG,QAAQ,0BAA2B,SAASzB,EAAO0B,UAC7C,IAAV1B,EAAoB,GACT,GAAT0B,EAAa1B,EAAMZ,cAAgBY,EAAM2B,gBAwB5CC,EAAgB,CACpBtG,SAAAA,EACAmE,SAAAA,EACA6B,KAAAA,EACAxG,KAAAA,EACAyG,MAAAA,EACAC,MAAAA,EACA7C,YAAAA,EACAT,QAAAA,EACA5B,UAAAA,EACAwB,aAAAA,EACAY,gBAAAA,UAIAjD,uBAAKa,iCAAkCuB,GACrCpC,yBAAOa,UAAU,cAAcuF,iBAAkBhE,GAC/CpC,wBAAMa,UAAU,eACbmD,GAAY,QAAM8B,GAASjG,MAC3B0B,GACCvB,gBAACqB,GACCE,QAASA,EACTE,kBAAmBA,EACnBC,aAAcA,EACdJ,iBAAkBA,KAItB,kBACQjC,OACD,gBACIW,gBAACwC,iBAAOJ,QAASA,GAAa+D,QAClC,mBACInG,gBAACgD,iBAAUZ,QAASA,GAAa+D,QACrC,kBAEDnG,gBAAC+D,iBACCE,SAAUA,EACV7B,QAASA,GACL+D,QAGL,cACInG,gBAACkF,iBAAK9C,QAASA,GAAa+D,QAChC,kBACInG,gBAACqF,iBAASjD,QAASA,GAAa+D,QACpC,gBACInG,gBAACsF,iBAAYlD,QAASA,GAAa+D,QACvC,kBACInG,gBAACwF,iBAASpD,QAASA,GAAa+D,QACpC,gBACInG,gBAAC0F,iBAAOtD,QAASA,GAAa+D,mBAE9BnG,gBAACyF,iBAAKrD,QAASA,GAAa+D,KAzBvC,IA6BHJ,GAAS/F,uBAAKa,UAAU,eAAekF,KAK9CH,EAAMxE,aAAe,CACnBiB,aAAc,KACdI,QAAS,GACTlB,QAAS,GACTE,kBAAmB,OACnBC,aAAc,OACdJ,iBAAkB,YCjFd+E,EAAc,oBAClB3F,aAAAA,aAAe,kBAAM,YACrB4F,aAAAA,oBACA3F,WAAAA,aAAa,WACbd,IAAAA,aACAgB,UAAAA,aAAY,KACZ0F,IAAAA,aACAC,WAAAA,aAAa,WAELtG,EAAmCU,aAAW5B,GAA9CkB,iBAGNF,wBACEa,UAAcA,gBACd0F,SAAU,SAAA5D,GACRA,EAAE8D,qBACInH,OAAoCY,UACnCZ,EAAKI,cACZ6G,EAASjH,KAGVO,EACDG,2BACEA,0BACET,GAAG,eACHsB,UAAU,4BACVxB,KAAK,UAEJmH,GAEFF,GACCtG,gBAACS,GAAaC,aAAcA,EAAcC,WAAYA,oCAlDnD,oBAAGjB,cAAAA,aAAgB,KAAOgH,iKAEnC1G,gBAACJ,GAAaF,cAAeA,GAC3BM,gBAACM,QACDN,gBAACqG,mBAAiBK"}